// @UltraBlur
DEFINE_UI_PARAMS(global_sat, Global Saturation, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(direction, Direction, DCTLUI_COMBO_BOX, 0, {CIE_1976_LUV, ZCAM_JzAzBz, Test}, {CIE_1976_LUV, ZCAM_JzAzBz, Test})
DEFINE_UI_PARAMS(white_point_x, White Point x, DCTLUI_SLIDER_FLOAT, 0.31271, 0.25, 0.5, 0.0001)
DEFINE_UI_PARAMS(white_point_y, White Point y, DCTLUI_SLIDER_FLOAT, 0.32902, 0.25, 0.5, 0.0001)
// DEFINE_UI_PARAMS(white_point_luminance, White Point Luminance, DCTLUI_SLIDER_FLOAT, 100.0, 48, 10009, 1)
DEFINE_UI_PARAMS(saturation_all, Saturation, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.5, 0.0001)
// DEFINE_UI_PARAMS(saturation_r, Saturation R, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0001)
// DEFINE_UI_PARAMS(saturation_g, Saturation G, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0001)
// DEFINE_UI_PARAMS(saturation_b, Saturation B, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0001)
// DEFINE_UI_PARAMS(saturation_y, Saturation Y, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0001)
#define white_point_luminance (100)
#define PI (3.14159265358979)
//===================================================
//  GamutMapping
//===================================================

__DEVICE__ float uvclamp(float in, float min, float max)
{
    in = _clampf(in, min, max);
    return in;
}

//===================================================
//  CIE_1976_LUV：XYZ->LUV->LCH->LSH->LCH->LUV->XYZ
//===================================================
__DEVICE__ float powf(float base, float exp)
{
    return _copysignf(_powf(_fabs(base), exp), base);
}

__DEVICE__ float2 xyz_to_xy(float3 xyz, float2 white_xy)
{
    if (xyz.y == 0.0)
    {
        return white_xy;
    }
    float x = xyz.x / (xyz.x + xyz.y + xyz.z);
    float y = xyz.y / (xyz.x + xyz.y + xyz.z);
    return make_float2(x, y);
}

__DEVICE__ float2 xy_to_uv(float2 xy)
{
    float up = 4.0 * xy.x / (-2.0 * xy.x + 12.0 * xy.y + 3.0);
    float vp = 9.0 * xy.y / (-2.0 * xy.x + 12.0 * xy.y + 3.0);
    return make_float2(up, vp);
}

__DEVICE__ inline float2 xyY_to_xy(float3 xyY)
{
    return make_float2(xyY.x, xyY.y);
}

__DEVICE__ float2 uv_to_xy(float2 uv)
{
    float x = 9.0 * uv.x / (6.0 * uv.x - 16.0 * uv.y + 12.0);
    float y = 9.0 * uv.y / (6.0 * uv.x - 16.0 * uv.y + 12.0);
    return make_float2(x, y);
}

__DEVICE__ float3 xyz_to_luv(float3 xyz, float3 white_xyY)
{
    float2 white_uv = xy_to_uv(xyY_to_xy(white_xyY));
    float2 xy = xyz_to_xy(xyz, xyY_to_xy(white_xyY));
    float2 uv = xy_to_uv(xy);
    float Ls;
    float Yn = white_xyY.z;
    if ((xyz.y / Yn) <= powf(6.0 / 29.0, 3.0))
    {
        Ls = powf(29.0 / 3.0, 3.0) * xyz.y / Yn;
    }
    else
    {
        Ls = 116.0 * powf(xyz.y / Yn, 1.0 / 3.0) - 16.0;
    }
    float us = 13.0 * Ls * (uv.x - white_uv.x);
    float vs = 13.0 * Ls * (uv.y - white_uv.y);

    float3 luv = make_float3(Ls, us, vs);
    return luv;
}

__DEVICE__ float3 luv_to_xyz(float3 luv, float3 white_xyY)
{

    float Ls = luv.x;
    float us = luv.y;
    float vs = luv.z;
    float2 white_uv = xy_to_uv(xyY_to_xy(white_xyY));
    float Yn = white_xyY.z;

    float up = us / (13.0 * Ls) + white_uv.x;
    float vp = vs / (13.0 * Ls) + white_uv.y;

    if (Ls == 0.0)
    {
        up = white_uv.x;
        vp = white_uv.y;
    }

    float Y;
    if (Ls <= 8.0)
    {
        Y = Yn * Ls * powf(3.0 / 29.0, 3.0);
    }
    else
    {
        Y = Yn * powf((Ls + 16.0) / 116.0, 3.0);
    }
    float X = Y * 9.0 * up / (4.0 * vp);
    float Z = Y * (12.0 - 3.0 * up - 20.0 * vp) / (4.0 * vp);

    X = uvclamp(X, 0, 1);
    Y = uvclamp(Y, 0, 1);
    Z = uvclamp(Z, 0, 1);

    return make_float3(X, Y, Z);
}

__DEVICE__ float3 luv_to_lch(float3 luv)
{
    float cs = _hypotf(luv.y, luv.z);
    float hs = _atan2f(luv.z, luv.y) / (2.0 * PI);
    if (hs < 0)
    {
        hs += 1.0;
    }
    return make_float3(luv.x, cs, hs);
}

__DEVICE__ float3 lch_to_luv(float3 lch)
{
    float3 luv = lch;

    luv.y = lch.y * _cosf(lch.z * 2.0 * PI);
    luv.z = lch.y * _sinf(lch.z * 2.0 * PI);

    return luv;
}

__DEVICE__ float3 lch_to_lsh(float3 lch)
{
    float s = lch.y / lch.x;
    if (lch.x == 0.0)
    {
        s = 0.0;
    }
    return make_float3(lch.x, s, lch.z);
}

__DEVICE__ float3 lsh_to_lch(float3 lsh)
{
    float c = lsh.y * lsh.x;
    return make_float3(lsh.x, c, lsh.z);
}

//===================================================
//  ZCAM_JzAzBz:
//===================================================

typedef struct
{
    float3 r0, r1, r2;
} mat3;

__CONSTANT__ float c1 = 0.8359375f;
__CONSTANT__ float c2 = 18.8515625f;
__CONSTANT__ float c3 = 18.6875f;
__CONSTANT__ float cb = 1.15f;
__CONSTANT__ float cg = 0.66f;
__CONSTANT__ float eta = 0.1593017578125f;
__CONSTANT__ float rho = 134.034375f;
__CONSTANT__ float epsilon = 3.703522621e-11f;

__CONSTANT__ mat3 ZCAM_XYZ_to_LMS = {{0.41478972f, 0.579999f, 0.014648f}, {-0.20151f, 1.120649f, 0.0531008f}, {-0.0166008f, 0.2648f, 0.6684799f}};

#ifdef DEVICE_IS_OPENCL
__CONSTANT__ mat3 ZCAM_LMS_to_Izazbz = {{0.0f, 0.9999999999629647f, 0.0f}, {3.524f, -4.066708f, 0.542708f}, {0.199076f, 1.096799f, -1.295875f}};
#endif

#ifdef DEVICE_IS_CUDA
__CONSTANT__ mat3 ZCAM_LMS_to_Izazbz = {{0.0f, 1.0f - 3.703522621e-11f, 0.0f}, {3.524f, -4.066708f, 0.542708f}, {0.199076f, 1.096799f, -1.295875f}};
#endif

#ifdef DEVICE_IS_METAL
__CONSTANT__ mat3 ZCAM_LMS_to_Izazbz = {{0.0f, 1.0f - epsilon, 0.0f}, {3.524f, -4.066708f, 0.542708f}, {0.199076f, 1.096799f, -1.295875f}};
#endif

// __CONSTANT__ mat3 ZCAM_Izazbz_to_LMS = 

__DEVICE__ float3 vector_dot(mat3 m, float3 v)
{
    float3 result;

    result.x = m.r0.x * v.x + m.r0.y * v.y + m.r0.z * v.z;
    result.y = m.r1.x * v.x + m.r1.y * v.y + m.r1.z * v.z;
    result.z = m.r2.x * v.x + m.r2.y * v.y + m.r2.z * v.z;

    return result;
}

__DEVICE__ mat3 invert(mat3 m)
{
    float det = m.r0.x * (m.r1.y * m.r2.z - m.r2.y * m.r1.z) - m.r0.y * (m.r1.x * m.r2.z - m.r1.z * m.r2.x) + m.r0.z * (m.r1.x * m.r2.y - m.r1.y * m.r2.x);
    float invdet = 1.0f / det;
    mat3 minv;
    minv.r0.x = (m.r1.y * m.r2.z - m.r2.y * m.r1.z) * invdet;
    minv.r0.y = (m.r0.z * m.r2.y - m.r0.y * m.r2.z) * invdet;
    minv.r0.z = (m.r0.y * m.r1.z - m.r0.z * m.r1.y) * invdet;
    minv.r1.x = (m.r1.z * m.r2.x - m.r1.x * m.r2.z) * invdet;
    minv.r1.y = (m.r0.x * m.r2.z - m.r0.z * m.r2.x) * invdet;
    minv.r1.z = (m.r1.x * m.r0.z - m.r0.x * m.r1.z) * invdet;
    minv.r2.x = (m.r1.x * m.r2.y - m.r2.x * m.r1.y) * invdet;
    minv.r2.y = (m.r2.x * m.r0.y - m.r0.x * m.r2.y) * invdet;
    minv.r2.z = (m.r0.x * m.r1.y - m.r1.x * m.r0.y) * invdet;
    return minv;
}



__DEVICE__ float3 Jch_to_Juv(float3 lch)
{
    float3 luv = lch;

    luv.y = lch.y * _cosf(lch.z * 2.0 * PI);
    luv.z = lch.y * _sinf(lch.z * 2.0 * PI);

    // // 如何计算得出 Juv.y 和 Juv.z 的合理 min 和 max？
    // 不对，测试发现 uv 超出合理范围后并不会导致超色域，问题还是出在 L'M'S'
    // luv.y = uvclamp(luv.y, -0.5, 0.5);
    // luv.z = uvclamp(luv.z, -0.5, 0.5);

    return luv;
}

__DEVICE__ float3 Jch_to_Jsh(float3 lch)
{
    float s = lch.y / lch.x;
    if (lch.x == 0.0)
    {
        s = 0.0;
    }
    return make_float3(lch.x, s, lch.z);
}

__DEVICE__ float3 Jsh_to_Jch(float3 lsh)
{
    float c = lsh.y * lsh.x;
    return make_float3(lsh.x, c, lsh.z);
}

__DEVICE__ float lin_to_ZCAMPQ(float x)
{
    return _powf((c1 + c2 * _powf((x / 10000.0f), eta)) / (1.0f + c3 * _powf((x / 10000.0f), eta)), rho);
}

__DEVICE__ float PQZCAM_to_lin(float x)
{
    float out = 10000.0f * _powf((c1 - _powf(x, 1.0f / rho)) / (c3 * _powf(x, 1.0f / rho) - c2), 1.0f / eta);
    
    //发现这个是解决问题的关键 ，亮度降为负值导致的问题...
    out = (out > 0.f) ? out : 0.f;
    return out;
}

__DEVICE__ float3 XYZ_to_Izazbz(float3 XYZD65)
{
    // XYZ -> X'Y'Z
    float3 XYZpD65 = XYZD65;
    XYZpD65.x = cb * XYZD65.x - (cb - 1.0f) * XYZD65.z;
    XYZpD65.y = cg * XYZD65.y - (cg - 1.0f) * XYZD65.x;

    // X'Y'Z -> LMS
    float3 LMS = vector_dot(ZCAM_XYZ_to_LMS, XYZpD65);
    
    // LMS -> L'M'S'
    float3 LMSp;
    LMSp.x = lin_to_ZCAMPQ(LMS.x);
    LMSp.y = lin_to_ZCAMPQ(LMS.y);
    LMSp.z = lin_to_ZCAMPQ(LMS.z);

    // L'M'S' -> Izazbz
    float3 Izazbz = vector_dot(ZCAM_LMS_to_Izazbz, LMSp);

    // Iz to Jz
    Izazbz.x = 0.44f * Izazbz.x / (1.0f - 0.56f * Izazbz.x) - 1.6295499532821566e-11f;
    Izazbz.x = (Izazbz.x > 0.f) ? Izazbz.x : 0.f;

    return Izazbz;
}



__DEVICE__ float3 Izazbz_to_XYZ(float3 Izazbz)
{
    // Jz to Iz
    const float d = -0.56f;
    const float d0 = 1.6295499532821566e-11f;
    Izazbz.x += d0;
    Izazbz.x = Izazbz.x / (1.0f + d - d * Izazbz.x);
    Izazbz.x = (Izazbz.x > 0.f) ? Izazbz.x : 0.f;

    //IzAzBz -> L'M'S'
    float3 LMSp = vector_dot(invert(ZCAM_LMS_to_Izazbz), Izazbz);

    // L'M'S' -> LMS
    float3 LMS;
    LMS.x = PQZCAM_to_lin(LMSp.x);
    LMS.y = PQZCAM_to_lin(LMSp.y);
    LMS.z = PQZCAM_to_lin(LMSp.z);

    // LMS -> X'Y'Z   
    float3 XYZpD65 = vector_dot(invert(ZCAM_XYZ_to_LMS), LMS);
    
    // X'Y'Z -> XYZ_D65
    float3 XYZD65 = XYZpD65;
    XYZD65.x = (XYZpD65.x + (cb - 1.0f) * XYZpD65.z) / cb;
    XYZD65.y = (XYZpD65.y + (cg - 1.0f) * XYZD65.x) / cg;

    return XYZD65;
}
//===================================================
//  Transform
//===================================================
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 white_xyY = make_float3(white_point_x, white_point_y, white_point_luminance);
    float3 in = make_float3(p_R, p_G, p_B);
    float3 out;

    if (direction == CIE_1976_LUV)
    {
        out = lch_to_lsh(luv_to_lch(xyz_to_luv(in, white_xyY)));
        if (global_sat == 1)
        {
            out.y = out.y * saturation_all * 2;
            out.x = out.x;
            out.z = out.z;
        }
        else
        {
            out.y = out.y * saturation_all * 2;
            out.x = out.x;
            out.z = out.z;
        }
        out = luv_to_xyz(lch_to_luv(lsh_to_lch(out)), white_xyY);
    }
    else if (direction == ZCAM_JzAzBz)
    {
        out = Jch_to_Jsh(luv_to_lch(XYZ_to_Izazbz(in)));
        if (global_sat == 1)
        {
            out.y = out.y * saturation_all * 2;
            out.x = out.x;
            out.z = out.z;
        }
        else
        {
            out.y = out.y * saturation_all * 2;
            out.x = out.x;
            out.z = out.z;
        }
        out = Izazbz_to_XYZ(Jch_to_Juv(Jsh_to_Jch(out)));
    }
    else if (direction == Test)
    {
        out = Jch_to_Jsh(luv_to_lch(XYZ_to_Izazbz(in)));
        if (global_sat == 1)
        {
            out.y = out.y * saturation_all * 2;
            out.x = out.x;
            out.z = out.z;
        }
        else
        {
            out.y = out.y * saturation_all * 2;
            out.x = out.x;
            out.z = out.z;
        }
    }
    return out;
}