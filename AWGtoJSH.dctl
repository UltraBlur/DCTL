// @UltraBlur
// V1.2 240328

// A tool based on the ZCAM ,transfer Arri LogCv3 to JSH of ZCAM JzAzBz.

// INPUTï¼š Arri LogCv3 & Arri Wide Gamut 3

DEFINE_UI_PARAMS(DIRECTION, Direction, DCTLUI_COMBO_BOX, 0, {Forward, Inverse}, {AWG to JSH, JSH to AWG})

#define PI (3.14159265358979)

typedef struct
{
    float3 r0, r1, r2;
} mat3;

__CONSTANT__ float c1 = 0.8359375f;
__CONSTANT__ float c2 = 18.8515625f;
__CONSTANT__ float c3 = 18.6875f;
__CONSTANT__ float cb = 1.15f;
__CONSTANT__ float cg = 0.66f;
__CONSTANT__ float eta = 0.1593017578125f;
__CONSTANT__ float rho = 134.034375f;
__CONSTANT__ float epsilon = 3.703522621e-11f;

__CONSTANT__ mat3 ZCAM_XYZ_to_LMS = {{0.41478972f, 0.579999f, 0.014648f}, {-0.20151f, 1.120649f, 0.0531008f}, {-0.0166008f, 0.2648f, 0.6684799f}};

__CONSTANT__ mat3 AWG_to_XYZ = {{0.63800764f, 0.21470386f, 0.09774445f}, {0.29195377f, 0.82384104f, -0.11579482f}, { 0.00279827f, -0.06703423f, 1.15329373f}};

#ifdef DEVICE_IS_OPENCL
__CONSTANT__ mat3 ZCAM_LMS_to_Izazbz = {{0.0f, 0.9999999999629647f, 0.0f}, {3.524f, -4.066708f, 0.542708f}, {0.199076f, 1.096799f, -1.295875f}};
#endif

#ifdef DEVICE_IS_CUDA
__CONSTANT__ mat3 ZCAM_LMS_to_Izazbz = {{0.0f, 1.0f - 3.703522621e-11f, 0.0f}, {3.524f, -4.066708f, 0.542708f}, {0.199076f, 1.096799f, -1.295875f}};
#endif

#ifdef DEVICE_IS_METAL
__CONSTANT__ mat3 ZCAM_LMS_to_Izazbz = {{0.0f, 1.0f - epsilon, 0.0f}, {3.524f, -4.066708f, 0.542708f}, {0.199076f, 1.096799f, -1.295875f}};
#endif



__DEVICE__ float3 vector_dot(mat3 m, float3 v)
{
    float3 result;

    result.x = m.r0.x * v.x + m.r0.y * v.y + m.r0.z * v.z;
    result.y = m.r1.x * v.x + m.r1.y * v.y + m.r1.z * v.z;
    result.z = m.r2.x * v.x + m.r2.y * v.y + m.r2.z * v.z;

    return result;
}

__DEVICE__ mat3 invert(mat3 m)
{
    float det = m.r0.x * (m.r1.y * m.r2.z - m.r2.y * m.r1.z) - m.r0.y * (m.r1.x * m.r2.z - m.r1.z * m.r2.x) + m.r0.z * (m.r1.x * m.r2.y - m.r1.y * m.r2.x);
    float invdet = 1.0f / det;
    mat3 minv;
    minv.r0.x = (m.r1.y * m.r2.z - m.r2.y * m.r1.z) * invdet;
    minv.r0.y = (m.r0.z * m.r2.y - m.r0.y * m.r2.z) * invdet;
    minv.r0.z = (m.r0.y * m.r1.z - m.r0.z * m.r1.y) * invdet;
    minv.r1.x = (m.r1.z * m.r2.x - m.r1.x * m.r2.z) * invdet;
    minv.r1.y = (m.r0.x * m.r2.z - m.r0.z * m.r2.x) * invdet;
    minv.r1.z = (m.r1.x * m.r0.z - m.r0.x * m.r1.z) * invdet;
    minv.r2.x = (m.r1.x * m.r2.y - m.r2.x * m.r1.y) * invdet;
    minv.r2.y = (m.r2.x * m.r0.y - m.r0.x * m.r2.y) * invdet;
    minv.r2.z = (m.r0.x * m.r1.y - m.r1.x * m.r0.y) * invdet;
    return minv;
}

__DEVICE__ float3 JzAzBz_to_Jch(float3 IzAzBz)
{
    float cs = _hypotf(IzAzBz.y, IzAzBz.z);
    float hs = _atan2f(IzAzBz.z, IzAzBz.y) / (2.0 * PI);
    if (hs < 0)
    {
        hs += 1.0;
    }
    return make_float3(IzAzBz.x, cs, hs);
}

__DEVICE__ float3 Jch_to_JzAzBz(float3 Jch)
{
    float3 lch = Jch;
   
    float3 luv;
    luv.y = lch.y * _cosf(lch.z * 2.0 * PI);
    luv.z = lch.y * _sinf(lch.z * 2.0 * PI);

    luv.x = lch.x;
    
    return luv;
}

__DEVICE__ float lin_to_ZCAMPQ(float x)
{   
    return _powf((c1 + c2 * _powf((x / 10000.0f), eta)) / (1.0f + c3 * _powf((x / 10000.0f), eta)), rho);
}

__DEVICE__ float PQZCAM_to_lin(float x)
{
    
    float out = 10000.0f * _powf((c1 - _powf(x, 1.0f / rho)) / (c3 * _powf(x, 1.0f / rho) - c2), 1.0f / eta);
    
    out = (out > 0.f) ? out : 0.f;
    return out;
}

__DEVICE__ float3 Jch_to_Jsh(float3 jch)
{

    float s = (jch.y/10)/jch.x;
    if (jch.x == 0.0)
    {
        s = 0.0;
    }
    jch.x = jch.x * 25;
    return make_float3(jch.x, s, jch.z);
}

__DEVICE__ float3 Jsh_to_Jch(float3 jsh)
{
    jsh.x = jsh.x / 25;
    float c = jsh.y * jsh.x * 10;
    return make_float3(jsh.x, c, jsh.z);
}

// LogC

__DEVICE__ float logc_2_lin(float in)
{
	float out = in > 0.1496582f ? (_powf(10.0f, (in - 0.385537f) / 0.2471896f) - 0.052272f) / 5.555556f : (in - 0.092809f) / 5.367655f;
	return out;
}

__DEVICE__ float3 logC_to_lin(float3 in)
{
	float3 out;
	
	out.x = logc_2_lin(in.x);
	out.y = logc_2_lin(in.y);
	out.z = logc_2_lin(in.z);
	
	return out;
}

__DEVICE__ float lin_2_logc(float in)
{
	float out = in > 0.010591f ? 0.24719f * _log10f(5.555556f * in + 0.052272f) + 0.385537f : 5.367655f * in + 0.092809f;
	return out;
}

__DEVICE__ float3 lin_to_logC(float3 in)
{
	float3 out;
	
	out.x = lin_2_logc(in.x);
	out.y = lin_2_logc(in.y);
	out.z = lin_2_logc(in.z);
	
	return out;
}


__DEVICE__ float3 XYZ_to_Jzazbz(float3 XYZD65)
{
    // XYZ -> X'Y'Z
    float3 XYZpD65 = XYZD65;
    XYZpD65.x = cb * XYZD65.x - (cb - 1.0f) * XYZD65.z;
    XYZpD65.y = cg * XYZD65.y - (cg - 1.0f) * XYZD65.x;

    // X'Y'Z -> LMS
    float3 LMS = vector_dot(ZCAM_XYZ_to_LMS, XYZpD65);
    
    // LMS -> L'M'S'
    float3 LMSp;
    LMSp.x = lin_to_ZCAMPQ(LMS.x);
    LMSp.y = lin_to_ZCAMPQ(LMS.y);
    LMSp.z = lin_to_ZCAMPQ(LMS.z);

    // L'M'S' -> Izazbz
    float3 Izazbz = vector_dot(ZCAM_LMS_to_Izazbz, LMSp);

    // Iz to Jz
    Izazbz.x = 0.44f * Izazbz.x / (1.0f - 0.56f * Izazbz.x) - 1.6295499532821566e-11f;
    Izazbz.x = (Izazbz.x > 0.f) ? Izazbz.x : 0.f;

    return Izazbz;
}

__DEVICE__ float3 Jzazbz_to_XYZ(float3 Izazbz)
{
    //Jz to Iz
    const float d = -0.56f;
    const float d0 = 1.6295499532821566e-11f;
    Izazbz.x += d0;
    Izazbz.x = Izazbz.x / (1.0f + d - d * Izazbz.x);
    Izazbz.x = (Izazbz.x > 0.f) ? Izazbz.x : 0.f;

    //IzAzBz -> L'M'S'
    float3 LMSp = vector_dot(invert(ZCAM_LMS_to_Izazbz), Izazbz);

    // L'M'S' -> LMS
    float3 LMS;
    LMS.x = PQZCAM_to_lin(LMSp.x);
    LMS.y = PQZCAM_to_lin(LMSp.y);
    LMS.z = PQZCAM_to_lin(LMSp.z);

    // LMS -> X'Y'Z   
    float3 XYZpD65 = vector_dot(invert(ZCAM_XYZ_to_LMS), LMS);
    
    // X'Y'Z -> XYZ_D65
    float3 XYZD65 = XYZpD65;
    XYZD65.x = (XYZpD65.x + (cb - 1.0f) * XYZpD65.z) / cb;
    XYZD65.y = (XYZpD65.y + (cg - 1.0f) * XYZD65.x) / cg;

    return XYZD65;
}

__DEVICE__ float3 awg_to_jch(float3 rgb)
{
    // Arri LogCv3 to Linear
    const float3 lin = logC_to_lin(rgb);

    // ALEXA Wide Gamut RGB To CIE 1931 XYZ
    const float3 xyz = vector_dot(AWG_to_XYZ, lin);
    
    // CIE 1931 XYZ To Jzazbz
    const float3 Jzazbz = XYZ_to_Jzazbz(xyz);
    
    //JzAzBz To JCH
    float3 jch = JzAzBz_to_Jch(Jzazbz);

    //Jz Chroma Hue to Jz Saturation Hue
    float3 jsh = Jch_to_Jsh(jch);

    return jsh;

}

__DEVICE__ float3 jch_to_awg(float3 rgb)
{
    // Jz Saturation Hue to Jz Chroma Hue
    float3 jch = Jsh_to_Jch(rgb);
    // JCH To JzAzBz 
    const float3 Jzazbz = Jch_to_JzAzBz(jch);
   
    // Jzazbz To CIE 1931 XYZ
    const float3 xyz = Jzazbz_to_XYZ(Jzazbz);

    // CIE 1931 XYZ To ALEXA Wide Gamut RGB 
    const float3 awg = vector_dot(invert(AWG_to_XYZ), xyz);
    
    // Linear to Arri LogCv3
    const float3 logc = lin_to_logC(awg);

    return logc;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{
	
	float3 rgb = make_float3(p_R, p_G, p_B);
	
	switch (DIRECTION) {
		case Forward:
			rgb = awg_to_jch(rgb);
			break;
		case Inverse:
			rgb = jch_to_awg(rgb);
			break;
	}

	return rgb;
}